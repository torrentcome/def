{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Powered by mkdocs.org Test/Run in local by docker image Commands docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material - Start the live-reloading docker docs server .github/workflows/ci.yml - Buid the website with Github Action Project layout mkdocs.yml # The configuration file docs/ index.md # This one ... # Other markdown pages image/ # From internet Licence Every information is public and can be find easily on internet.","title":"Welcome"},{"location":"#welcome","text":"Powered by mkdocs.org Test/Run in local by docker image","title":"Welcome"},{"location":"#commands","text":"docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material - Start the live-reloading docker docs server .github/workflows/ci.yml - Buid the website with Github Action","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file docs/ index.md # This one ... # Other markdown pages image/ # From internet","title":"Project layout"},{"location":"#licence","text":"Every information is public and can be find easily on internet.","title":"Licence"},{"location":"adb/","text":"Adb ADB = Android Debug Bridge It's a software-interface for the android system, which can be used to connect an android device with a computer using an USB cable or a wireless connection. It can be used to execute commands on the phone or transfer data between the device and the computer. The tool is part of the Android SDK (Android Software Development Kit) and is located in the subdirectory platform-tools. adb help // List all comands Adb Server adb kill-server adb start-server Adb Reboot adb reboot adb reboot recovery adb reboot-bootloader adb root //restarts adb with root permissions Shell adb shell // Open or run commands in a terminal on the host Android device. Devices adb usb adb devices //show devices attached adb devices -l //devices (product/model) adb connect ip_address_of_device Get device android version adb shell getprop ro.build.version.release Logcat adb logcat adb logcat -c // clear // The parameter -c will clear the current logs on the device. adb logcat -d > [path_to_file] // Save the logcat output to a file on the local system. adb bugreport > [path_to_file] // Will dump the whole device information like dumpstate, dumpsys and logcat output. Files adb push [source] [destination] // Copy files from your computer to your phone. adb pull [device file location] [local file location] // Copy files from your phone to your computer. App install adb -e install path/to/app.apk -d - directs command to the only connected USB device... -e - directs command to the only running emulator... -s <serial number> ... -p <product name or path> ... The flag you decide to use has to come before the actual adb command: adb devices | tail -n +2 | cut -sf 1 | xargs -IX adb -s X install -r com.myAppPackage // Install the given app on all connected devices. Uninstalling app from device adb uninstall com.myAppPackage adb uninstall <app .apk name> adb uninstall -k <app .apk name> -> \"Uninstall .apk withour deleting data\" adb shell pm uninstall com.example.MyApp adb shell pm clear [package] // Deletes all data associated with a package. adb devices | tail -n +2 | cut -sf 1 | xargs -IX adb -s X uninstall com.myAppPackage //Uninstall the given app from all connected devices Update app adb install -r yourApp.apk // -r means re-install the app and keep its data on the device. adb install \u2013k <.apk file path on computer> Home button adb shell am start -W -c android.intent.category.HOME -a android.intent.action.MAIN Activity Manager adb shell am start -a android.intent.action.VIEW adb shell am broadcast -a 'my_action' adb shell am start -a android.intent.action.CALL -d tel:+972527300294 // Make a call Open send sms screen with phone number and the message: adb shell am start -a android.intent.action.SENDTO -d sms:+972527300294 --es sms_body \"Test --ez exit_on_sent false Reset permissions adb shell pm reset-permissions -p your.app.package adb shell pm grant [packageName] [ Permission] // Grant a permission to an app. adb shell pm revoke [packageName] [ Permission] // Revoke a permission from an app. Change density adb shell wm size 2048x1536 adb shell wm density 288 Reset to default adb shell wm size reset adb shell wm density reset Print text adb shell input text 'Wow, it so cool feature' Screenshot adb shell screencap -p /sdcard/screenshot.png $ adb shell shell@ $ screencap /sdcard/screen.png shell@ $ exit $ adb pull /sdcard/screen.png Record video adb shell screenrecord /sdcard/NotAbleToLogin.mp4 $ adb shell shell@ $ screenrecord --verbose /sdcard/demo.mp4 (press Control + C to stop) shell@ $ exit $ adb pull /sdcard/demo.mp4 ShPref replace org.example.app with your application id Add a value to default shared preferences. adb shell 'am broadcast -a org.example.app.sp.PUT --es key key_name --es value \"hello world!\"' Remove a value to default shared preferences. adb shell 'am broadcast -a org.example.app.sp.REMOVE --es key key_name' Clear all default shared preferences. adb shell 'am broadcast -a org.example.app.sp.CLEAR --es key key_name' It's also possible to specify shared preferences file. adb shell 'am broadcast -a org.example.app.sp.PUT --es name Game --es key level --ei value 10' Data types adb shell 'am broadcast -a org.example.app.sp.PUT --es key string --es value \"hello world!\"' adb shell 'am broadcast -a org.example.app.sp.PUT --es key boolean --ez value true' adb shell 'am broadcast -a org.example.app.sp.PUT --es key float --ef value 3.14159' adb shell 'am broadcast -a org.example.app.sp.PUT --es key int --ei value 2015' adb shell 'am broadcast -a org.example.app.sp.PUT --es key long --el value 9223372036854775807' Restart application process after making changes adb shell 'am broadcast -a org.example.app.sp.CLEAR --ez restart true' Monkey adb shell monkey -p com.myAppPackage -v 10000 -s 100 // monkey tool is generating 10.000 random events on the real device Paths /data/data/<package>/databases (app databases) /data/data/<package>/shared_prefs/ (shared preferences) /data/app (apk installed by user) /system/app (pre-installed APK files) /mmt/asec (encrypted apps) (App2SD) /mmt/emmc (internal SD Card) /mmt/adcard (external/Internal SD Card) /mmt/adcard/external_sd (external SD Card) adb shell ls (list directory contents) adb shell ls -s (print size of each file) adb shell ls -R (list subdirectories recursively) Device information adb get-stat\u0435 (print device state) adb get-serialno (get the serial number) adb shell dumpsys iphonesybinfo (get the IMEI) adb shell netstat (list TCP connectivity) adb shell pwd (print current working directory) adb shell dumpsys battery (battery status) adb shell pm list features (list phone features) adb shell service list (list all services) adb shell dumpsys activity <package>/<activity> (activity info) adb shell ps (print process status) adb shell wm size (displays the current screen resolution) dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp' (print current app's opened activity) Package info adb shell list packages (list package names) adb shell list packages -r (list package name + path to apks) adb shell list packages -3 (list third party package names) adb shell list packages -s (list only system packages) adb shell list packages -u (list package names + uninstalled) adb shell dumpsys package packages (list info on all apps) adb shell dump <name> (list info on one package) adb shell path <package> (path to the apk file) Configure Settings Commands adb shell dumpsys battery set level <n> (change the level from 0 to 100) adb shell dumpsys battery set status<n> (change the level to unknown, charging, discharging, not charging or full) adb shell dumpsys battery reset (reset the battery) adb shell dumpsys battery set usb <n> (change the status of USB connection. ON or OFF) adb shell wm size WxH (sets the resolution to WxH) Device Related Commands adb reboot-recovery (reboot device into recovery mode) adb reboot fastboot (reboot device into recovery mode) adb shell screencap -p \"/path/to/screenshot.png\" (capture screenshot) adb shell screenrecord \"/path/to/record.mp4\" (record device screen) adb backup -apk -all -f backup.ab (backup settings and apps) adb backup -apk -shared -all -f backup.ab (backup settings, apps and shared storage) adb backup -apk -nosystem -all -f backup.ab (backup only non-system apps) adb restore backup.ab (restore a previous backup) adb shell am start|startservice|broadcast <INTENT>[<COMPONENT>] -a <ACTION> e.g. android.intent.action.VIEW -c <CATEGORY> e.g. android.intent.category.LAUNCHER (start activity intent) adb shell am start -a android.intent.action.VIEW -d URL (open URL) adb shell am start -t image/* -a android.intent.action.VIEW (opens gallery) Logs adb logcat [options] [filter] [filter] (view device log) adb bugreport (print bug reports) Other adb backup // Create a full backup of your phone and save to the computer. adb restore // Restore a backup to your phone. adb sideload // Push and flash custom ROMs and zips from your computer. fastboot devices // Check connection and get basic information about devices connected to the computer. // This is essentially the same command as adb devices from earlier. //However, it works in the bootloader, which ADB does not. Handy for ensuring that you have properly established a connection. -------------------------------------------------------------------------------- Shared Preferences replace org.example.app with your application id Add a value to default shared preferences. adb shell 'am broadcast -a org.example.app.sp.PUT --es key key_name --es value \"hello world!\"' Remove a value to default shared preferences. adb shell 'am broadcast -a org.example.app.sp.REMOVE --es key key_name' Clear all default shared preferences. adb shell 'am broadcast -a org.example.app.sp.CLEAR --es key key_name' It's also possible to specify shared preferences file. adb shell 'am broadcast -a org.example.app.sp.PUT --es name Game --es key level --ei value 10' Data types adb shell 'am broadcast -a org.example.app.sp.PUT --es key string --es value \"hello world!\"' adb shell 'am broadcast -a org.example.app.sp.PUT --es key boolean --ez value true' adb shell 'am broadcast -a org.example.app.sp.PUT --es key float --ef value 3.14159' adb shell 'am broadcast -a org.example.app.sp.PUT --es key int --ei value 2015' adb shell 'am broadcast -a org.example.app.sp.PUT --es key long --el value 9223372036854775807' Restart application process after making changes adb shell 'am broadcast -a org.example.app.sp.CLEAR --ez restart true' -------------------------------------------------------------------------------- Few bash snippets @Source (https://jonfhancock.com/bash-your-way-to-better-android-development-1169bc3e0424) Using tail -n // Use tail to remove the first line. Actually two lines. The first one is just a newline. The second is \u201cList of devices attached.\u201d $ adb devices | tail -n +2 Using cut -sf // Cut the last word and any white space off the end of each line. $ adb devices | tail -n +2 | cut -sf -1 Using xargs -I // Given the -I option, xargs will perform an action for each line of text that we feed into it. // We can give the line a variable name to use in commands that xargs can execute. $ adb devices | tail -n +2 | cut -sf -1 | xargs -I X echo X aw yiss Three options below together // Will print android version of all connected devices adb devices | tail -n +2 | cut -sf -1 | xargs -I X adb -s X shell getprop ro.build.version.release Using alias -- Example 1 alias tellMeMore=echo tellMeMore \"hi there\" Output => hi there -- Example 2 // Define alias alias apkinstall=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X install -r $1\" // And you can use it later apkinstall ~/Downloads/MyAppRelease.apk // Install an apk on all devices -- Example 3 alias rmapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X uninstall $1\" rmapp com.example.myapp // Uninstall a package from all devices -- Example 4 alias clearapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell pm clear $1\" clearapp com.example.myapp // Clear data on all devices (leave installed) -- Example 5 alias startintent=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell am start $1\" startintent https://twitter.com/JonFHancock // Launch a deep link on all devices Setting up your .bash_profile Finally, to make this all reusable even after rebooting your computer (aliases only last through the current session), we have to add these to your .bash_profile. You might or might not already have a .bash_profile, so let\u2019s make sure we append to it rather than overwriting it. Just open a terminal, and run the following command touch .bash_profile && open .bash_profile This will create it if it doesn\u2019t already exist, and open it in a text editor either way. Now just copy and paste all of the aliases into it, save, and close. alias startintent=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell am start $1\" alias apkinstall=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X install -r $1\" alias rmapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X uninstall $1\" alias clearapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell pm clear $1\"","title":"Adb"},{"location":"adb/#adb","text":"","title":"Adb"},{"location":"adb/#adb-android-debug-bridge","text":"It's a software-interface for the android system, which can be used to connect an android device with a computer using an USB cable or a wireless connection. It can be used to execute commands on the phone or transfer data between the device and the computer. The tool is part of the Android SDK (Android Software Development Kit) and is located in the subdirectory platform-tools. adb help // List all comands","title":"ADB = Android Debug Bridge"},{"location":"adb/#adb-server","text":"adb kill-server adb start-server","title":"Adb Server"},{"location":"adb/#adb-reboot","text":"adb reboot adb reboot recovery adb reboot-bootloader adb root //restarts adb with root permissions","title":"Adb Reboot"},{"location":"adb/#shell","text":"adb shell // Open or run commands in a terminal on the host Android device.","title":"Shell"},{"location":"adb/#devices","text":"adb usb adb devices //show devices attached adb devices -l //devices (product/model) adb connect ip_address_of_device","title":"Devices"},{"location":"adb/#get-device-android-version","text":"adb shell getprop ro.build.version.release","title":"Get device android version"},{"location":"adb/#logcat","text":"adb logcat adb logcat -c // clear // The parameter -c will clear the current logs on the device. adb logcat -d > [path_to_file] // Save the logcat output to a file on the local system. adb bugreport > [path_to_file] // Will dump the whole device information like dumpstate, dumpsys and logcat output.","title":"Logcat"},{"location":"adb/#files","text":"adb push [source] [destination] // Copy files from your computer to your phone. adb pull [device file location] [local file location] // Copy files from your phone to your computer.","title":"Files"},{"location":"adb/#app-install","text":"adb -e install path/to/app.apk -d - directs command to the only connected USB device... -e - directs command to the only running emulator... -s <serial number> ... -p <product name or path> ... The flag you decide to use has to come before the actual adb command: adb devices | tail -n +2 | cut -sf 1 | xargs -IX adb -s X install -r com.myAppPackage // Install the given app on all connected devices.","title":"App install"},{"location":"adb/#uninstalling-app-from-device","text":"adb uninstall com.myAppPackage adb uninstall <app .apk name> adb uninstall -k <app .apk name> -> \"Uninstall .apk withour deleting data\" adb shell pm uninstall com.example.MyApp adb shell pm clear [package] // Deletes all data associated with a package. adb devices | tail -n +2 | cut -sf 1 | xargs -IX adb -s X uninstall com.myAppPackage //Uninstall the given app from all connected devices","title":"Uninstalling app from device"},{"location":"adb/#update-app","text":"adb install -r yourApp.apk // -r means re-install the app and keep its data on the device. adb install \u2013k <.apk file path on computer>","title":"Update app"},{"location":"adb/#home-button","text":"adb shell am start -W -c android.intent.category.HOME -a android.intent.action.MAIN","title":"Home button"},{"location":"adb/#activity-manager","text":"adb shell am start -a android.intent.action.VIEW adb shell am broadcast -a 'my_action' adb shell am start -a android.intent.action.CALL -d tel:+972527300294 // Make a call","title":"Activity Manager"},{"location":"adb/#open-send-sms-screen-with-phone-number-and-the-message","text":"adb shell am start -a android.intent.action.SENDTO -d sms:+972527300294 --es sms_body \"Test --ez exit_on_sent false","title":"Open send sms screen with phone number and the message:"},{"location":"adb/#reset-permissions","text":"adb shell pm reset-permissions -p your.app.package adb shell pm grant [packageName] [ Permission] // Grant a permission to an app. adb shell pm revoke [packageName] [ Permission] // Revoke a permission from an app.","title":"Reset permissions"},{"location":"adb/#change-density","text":"adb shell wm size 2048x1536 adb shell wm density 288","title":"Change density"},{"location":"adb/#reset-to-default","text":"adb shell wm size reset adb shell wm density reset","title":"Reset to default"},{"location":"adb/#print-text","text":"adb shell input text 'Wow, it so cool feature'","title":"Print text"},{"location":"adb/#screenshot","text":"adb shell screencap -p /sdcard/screenshot.png $ adb shell shell@ $ screencap /sdcard/screen.png shell@ $ exit $ adb pull /sdcard/screen.png","title":"Screenshot"},{"location":"adb/#record-video","text":"adb shell screenrecord /sdcard/NotAbleToLogin.mp4 $ adb shell shell@ $ screenrecord --verbose /sdcard/demo.mp4 (press Control + C to stop) shell@ $ exit $ adb pull /sdcard/demo.mp4","title":"Record video"},{"location":"adb/#shpref-replace-orgexampleapp-with-your-application-id","text":"","title":"ShPref replace org.example.app with your application id"},{"location":"adb/#add-a-value-to-default-shared-preferences","text":"adb shell 'am broadcast -a org.example.app.sp.PUT --es key key_name --es value \"hello world!\"'","title":"Add a value to default shared preferences."},{"location":"adb/#remove-a-value-to-default-shared-preferences","text":"adb shell 'am broadcast -a org.example.app.sp.REMOVE --es key key_name'","title":"Remove a value to default shared preferences."},{"location":"adb/#clear-all-default-shared-preferences","text":"adb shell 'am broadcast -a org.example.app.sp.CLEAR --es key key_name'","title":"Clear all default shared preferences."},{"location":"adb/#its-also-possible-to-specify-shared-preferences-file","text":"adb shell 'am broadcast -a org.example.app.sp.PUT --es name Game --es key level --ei value 10'","title":"It's also possible to specify shared preferences file."},{"location":"adb/#data-types","text":"adb shell 'am broadcast -a org.example.app.sp.PUT --es key string --es value \"hello world!\"' adb shell 'am broadcast -a org.example.app.sp.PUT --es key boolean --ez value true' adb shell 'am broadcast -a org.example.app.sp.PUT --es key float --ef value 3.14159' adb shell 'am broadcast -a org.example.app.sp.PUT --es key int --ei value 2015' adb shell 'am broadcast -a org.example.app.sp.PUT --es key long --el value 9223372036854775807'","title":"Data types"},{"location":"adb/#restart-application-process-after-making-changes","text":"adb shell 'am broadcast -a org.example.app.sp.CLEAR --ez restart true'","title":"Restart application process after making changes"},{"location":"adb/#monkey","text":"adb shell monkey -p com.myAppPackage -v 10000 -s 100 // monkey tool is generating 10.000 random events on the real device","title":"Monkey"},{"location":"adb/#paths","text":"/data/data/<package>/databases (app databases) /data/data/<package>/shared_prefs/ (shared preferences) /data/app (apk installed by user) /system/app (pre-installed APK files) /mmt/asec (encrypted apps) (App2SD) /mmt/emmc (internal SD Card) /mmt/adcard (external/Internal SD Card) /mmt/adcard/external_sd (external SD Card) adb shell ls (list directory contents) adb shell ls -s (print size of each file) adb shell ls -R (list subdirectories recursively)","title":"Paths"},{"location":"adb/#device-information","text":"adb get-stat\u0435 (print device state) adb get-serialno (get the serial number) adb shell dumpsys iphonesybinfo (get the IMEI) adb shell netstat (list TCP connectivity) adb shell pwd (print current working directory) adb shell dumpsys battery (battery status) adb shell pm list features (list phone features) adb shell service list (list all services) adb shell dumpsys activity <package>/<activity> (activity info) adb shell ps (print process status) adb shell wm size (displays the current screen resolution) dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp' (print current app's opened activity)","title":"Device information"},{"location":"adb/#package-info","text":"adb shell list packages (list package names) adb shell list packages -r (list package name + path to apks) adb shell list packages -3 (list third party package names) adb shell list packages -s (list only system packages) adb shell list packages -u (list package names + uninstalled) adb shell dumpsys package packages (list info on all apps) adb shell dump <name> (list info on one package) adb shell path <package> (path to the apk file)","title":"Package info"},{"location":"adb/#configure-settings-commands","text":"adb shell dumpsys battery set level <n> (change the level from 0 to 100) adb shell dumpsys battery set status<n> (change the level to unknown, charging, discharging, not charging or full) adb shell dumpsys battery reset (reset the battery) adb shell dumpsys battery set usb <n> (change the status of USB connection. ON or OFF) adb shell wm size WxH (sets the resolution to WxH)","title":"Configure Settings Commands"},{"location":"adb/#device-related-commands","text":"adb reboot-recovery (reboot device into recovery mode) adb reboot fastboot (reboot device into recovery mode) adb shell screencap -p \"/path/to/screenshot.png\" (capture screenshot) adb shell screenrecord \"/path/to/record.mp4\" (record device screen) adb backup -apk -all -f backup.ab (backup settings and apps) adb backup -apk -shared -all -f backup.ab (backup settings, apps and shared storage) adb backup -apk -nosystem -all -f backup.ab (backup only non-system apps) adb restore backup.ab (restore a previous backup) adb shell am start|startservice|broadcast <INTENT>[<COMPONENT>] -a <ACTION> e.g. android.intent.action.VIEW -c <CATEGORY> e.g. android.intent.category.LAUNCHER (start activity intent) adb shell am start -a android.intent.action.VIEW -d URL (open URL) adb shell am start -t image/* -a android.intent.action.VIEW (opens gallery)","title":"Device Related Commands"},{"location":"adb/#logs","text":"adb logcat [options] [filter] [filter] (view device log) adb bugreport (print bug reports)","title":"Logs"},{"location":"adb/#other","text":"adb backup // Create a full backup of your phone and save to the computer. adb restore // Restore a backup to your phone. adb sideload // Push and flash custom ROMs and zips from your computer. fastboot devices // Check connection and get basic information about devices connected to the computer. // This is essentially the same command as adb devices from earlier. //However, it works in the bootloader, which ADB does not. Handy for ensuring that you have properly established a connection. --------------------------------------------------------------------------------","title":"Other"},{"location":"adb/#shared-preferences","text":"","title":"Shared Preferences"},{"location":"adb/#replace-orgexampleapp-with-your-application-id","text":"","title":"replace org.example.app with your application id"},{"location":"adb/#add-a-value-to-default-shared-preferences_1","text":"adb shell 'am broadcast -a org.example.app.sp.PUT --es key key_name --es value \"hello world!\"'","title":"Add a value to default shared preferences."},{"location":"adb/#remove-a-value-to-default-shared-preferences_1","text":"adb shell 'am broadcast -a org.example.app.sp.REMOVE --es key key_name'","title":"Remove a value to default shared preferences."},{"location":"adb/#clear-all-default-shared-preferences_1","text":"adb shell 'am broadcast -a org.example.app.sp.CLEAR --es key key_name'","title":"Clear all default shared preferences."},{"location":"adb/#its-also-possible-to-specify-shared-preferences-file_1","text":"adb shell 'am broadcast -a org.example.app.sp.PUT --es name Game --es key level --ei value 10'","title":"It's also possible to specify shared preferences file."},{"location":"adb/#data-types_1","text":"adb shell 'am broadcast -a org.example.app.sp.PUT --es key string --es value \"hello world!\"' adb shell 'am broadcast -a org.example.app.sp.PUT --es key boolean --ez value true' adb shell 'am broadcast -a org.example.app.sp.PUT --es key float --ef value 3.14159' adb shell 'am broadcast -a org.example.app.sp.PUT --es key int --ei value 2015' adb shell 'am broadcast -a org.example.app.sp.PUT --es key long --el value 9223372036854775807'","title":"Data types"},{"location":"adb/#restart-application-process-after-making-changes_1","text":"adb shell 'am broadcast -a org.example.app.sp.CLEAR --ez restart true' --------------------------------------------------------------------------------","title":"Restart application process after making changes"},{"location":"adb/#few-bash-snippets","text":"@Source (https://jonfhancock.com/bash-your-way-to-better-android-development-1169bc3e0424)","title":"Few bash snippets"},{"location":"adb/#using-tail-n","text":"// Use tail to remove the first line. Actually two lines. The first one is just a newline. The second is \u201cList of devices attached.\u201d $ adb devices | tail -n +2","title":"Using tail -n"},{"location":"adb/#using-cut-sf","text":"// Cut the last word and any white space off the end of each line. $ adb devices | tail -n +2 | cut -sf -1","title":"Using cut -sf"},{"location":"adb/#using-xargs-i","text":"// Given the -I option, xargs will perform an action for each line of text that we feed into it. // We can give the line a variable name to use in commands that xargs can execute. $ adb devices | tail -n +2 | cut -sf -1 | xargs -I X echo X aw yiss","title":"Using xargs -I"},{"location":"adb/#three-options-below-together","text":"// Will print android version of all connected devices adb devices | tail -n +2 | cut -sf -1 | xargs -I X adb -s X shell getprop ro.build.version.release","title":"Three options below together"},{"location":"adb/#using-alias","text":"-- Example 1 alias tellMeMore=echo tellMeMore \"hi there\" Output => hi there -- Example 2 // Define alias alias apkinstall=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X install -r $1\" // And you can use it later apkinstall ~/Downloads/MyAppRelease.apk // Install an apk on all devices -- Example 3 alias rmapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X uninstall $1\" rmapp com.example.myapp // Uninstall a package from all devices -- Example 4 alias clearapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell pm clear $1\" clearapp com.example.myapp // Clear data on all devices (leave installed) -- Example 5 alias startintent=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell am start $1\" startintent https://twitter.com/JonFHancock // Launch a deep link on all devices Setting up your .bash_profile Finally, to make this all reusable even after rebooting your computer (aliases only last through the current session), we have to add these to your .bash_profile. You might or might not already have a .bash_profile, so let\u2019s make sure we append to it rather than overwriting it. Just open a terminal, and run the following command touch .bash_profile && open .bash_profile This will create it if it doesn\u2019t already exist, and open it in a text editor either way. Now just copy and paste all of the aliases into it, save, and close. alias startintent=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell am start $1\" alias apkinstall=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X install -r $1\" alias rmapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X uninstall $1\" alias clearapp=\"adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X shell pm clear $1\"","title":"Using alias"},{"location":"agile/","text":"Agile Description (fr) Les Jalons R\u00e9union de lancement Le d\u00e9marrage officiel du projet, sous forme d\u2019une r\u00e9union o\u00f9 l\u2019ensemble des participants au projet (le comit\u00e9 projet) sont convi\u00e9s. La r\u00e9union est orchestr\u00e9 par le chef de projet (ou directeur) et se d\u00e9roule g\u00e9n\u00e9ralement en trois phases (les pr\u00e9sentations (soci\u00e9t\u00e9, personnes et projet) , le d\u00e9roulement du projet et le planning). Validation des sp\u00e9cifications La premi\u00e8re phase du projet est constitu\u00e9e des sp\u00e9cifications techniques et fonctionnelles. Leurs validations par les deux parties (client et prestataire) sont contractualis\u00e9es au travers d\u2019un document de sp\u00e9cifications. Cette \u00e9tape d\u00e9marre le processus de production c\u00f4t\u00e9 prestataire, et, bien souvent une cl\u00e9 de facturation. Validation de la charte graphique En parall\u00e8le des sp\u00e9cifications, la charte graphique est g\u00e9n\u00e9r\u00e9e. Il est imp\u00e9ratif d\u2019arr\u00eater une version afin de l\u2019int\u00e9grer dans le d\u00e9veloppement, un proc\u00e8s-verbal acte ce travail. Installation en pr\u00e9-production D\u00e9but de la V\u00e9rification Aptitude du Bon Fonctionnement officialis\u00e9 par le proc\u00e8s-verbal de livraison. Le livrable est install\u00e9 sur l\u2019environnement de pr\u00e9-production. Validation de la VABF (V\u00e9rification d\u2019Aptitude du Bon Fonctionnement) Au terme de la phase de recette, le client est satisfait (sisi cela arrive !) du livrable et valide la recette en signant le proc\u00e8s-verbal de recette. La recette est un temps fort du projet, elle doit \u00eatre bien cadr\u00e9e et d\u00e9limit\u00e9e dans le temps. Installation en production D\u00e9termine le passage du projet de la recette \u00e0 la production. En terme de phase de projet on passe de la VABF \u00e0 la VSR. Attention, il ne faut pas confondre avec la mise en production effective du projet par le client. Avant cette ouverture, il est n\u00e9cessaire d\u2019effectuer certaines t\u00e2ches, comme un accompagnement et une saisie d\u2019information initiale. - Validation de la VSR (V\u00e9rification du Service R\u00e9gulier) Il faut s\u2019assurer que le livrable est procure un service r\u00e9gulier dans les conditions normales d\u2019exploitation. Des tests de mont\u00e9e en charge peuvent \u00eatre ex\u00e9cut\u00e9s. Fin de la garantie La p\u00e9riode de garantie n\u2019est pas obligatoire, mais tr\u00e8s souvent pr\u00e9sent dans un projet au forfait. La fin de cette phase met un point final au projet. Il peut s\u2019\u00e9tendre par un contrat de tiers maintenance applicative.","title":"Agile"},{"location":"agile/#agile","text":"","title":"Agile"},{"location":"agile/#description-fr-les-jalons","text":"","title":"Description (fr) Les Jalons"},{"location":"agile/#reunion-de-lancement","text":"Le d\u00e9marrage officiel du projet, sous forme d\u2019une r\u00e9union o\u00f9 l\u2019ensemble des participants au projet (le comit\u00e9 projet) sont convi\u00e9s. La r\u00e9union est orchestr\u00e9 par le chef de projet (ou directeur) et se d\u00e9roule g\u00e9n\u00e9ralement en trois phases (les pr\u00e9sentations (soci\u00e9t\u00e9, personnes et projet) , le d\u00e9roulement du projet et le planning).","title":"R\u00e9union de lancement"},{"location":"agile/#validation-des-specifications","text":"La premi\u00e8re phase du projet est constitu\u00e9e des sp\u00e9cifications techniques et fonctionnelles. Leurs validations par les deux parties (client et prestataire) sont contractualis\u00e9es au travers d\u2019un document de sp\u00e9cifications. Cette \u00e9tape d\u00e9marre le processus de production c\u00f4t\u00e9 prestataire, et, bien souvent une cl\u00e9 de facturation.","title":"Validation des sp\u00e9cifications"},{"location":"agile/#validation-de-la-charte-graphique","text":"En parall\u00e8le des sp\u00e9cifications, la charte graphique est g\u00e9n\u00e9r\u00e9e. Il est imp\u00e9ratif d\u2019arr\u00eater une version afin de l\u2019int\u00e9grer dans le d\u00e9veloppement, un proc\u00e8s-verbal acte ce travail.","title":"Validation de la charte graphique"},{"location":"agile/#installation-en-pre-production","text":"D\u00e9but de la V\u00e9rification Aptitude du Bon Fonctionnement officialis\u00e9 par le proc\u00e8s-verbal de livraison. Le livrable est install\u00e9 sur l\u2019environnement de pr\u00e9-production.","title":"Installation en pr\u00e9-production"},{"location":"agile/#validation-de-la-vabf-verification-daptitude-du-bon-fonctionnement","text":"Au terme de la phase de recette, le client est satisfait (sisi cela arrive !) du livrable et valide la recette en signant le proc\u00e8s-verbal de recette. La recette est un temps fort du projet, elle doit \u00eatre bien cadr\u00e9e et d\u00e9limit\u00e9e dans le temps.","title":"Validation de la VABF (V\u00e9rification d\u2019Aptitude du Bon Fonctionnement)"},{"location":"agile/#installation-en-production","text":"D\u00e9termine le passage du projet de la recette \u00e0 la production. En terme de phase de projet on passe de la VABF \u00e0 la VSR. Attention, il ne faut pas confondre avec la mise en production effective du projet par le client. Avant cette ouverture, il est n\u00e9cessaire d\u2019effectuer certaines t\u00e2ches, comme un accompagnement et une saisie d\u2019information initiale. - Validation de la VSR (V\u00e9rification du Service R\u00e9gulier) Il faut s\u2019assurer que le livrable est procure un service r\u00e9gulier dans les conditions normales d\u2019exploitation. Des tests de mont\u00e9e en charge peuvent \u00eatre ex\u00e9cut\u00e9s.","title":"Installation en production"},{"location":"agile/#fin-de-la-garantie","text":"La p\u00e9riode de garantie n\u2019est pas obligatoire, mais tr\u00e8s souvent pr\u00e9sent dans un projet au forfait. La fin de cette phase met un point final au projet. Il peut s\u2019\u00e9tendre par un contrat de tiers maintenance applicative.","title":"Fin de la garantie"},{"location":"android/","text":"Android Version & Name CodeName Version Api level R 11 API 30 Android10 10 API 29 Pie 9 API 28 Oreo 8 API 26-27 Nougat 7 API 24-25 Ideally, the relationship would look more like this in the steady state: minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK) You\u2019ll hit the biggest audience with a low minSdkVersion and look and act the best by targeting and compiling with the latest SDK \u2014 a great way to #BuildBetterApps Best practice & Writing clean code Nested If's I hate this, I seriously do, you have statements which require multiple checks like this below code and it goes so deep really deep, In coding which is bad actually. if (vehicle != null) { if (vehicle.getCar() != null) { if (vehicle.getCar().getModel() != null) { int price = vehicle.getCar().getModel().getPrice(); } } } And the thing is, It can be avoided, you totally can, like this. As you see below one is more readable and easy to understand. if (vehicle == null || vehicle.getCar() == null || vehicle.getCar().getModel() == null) return; int price = vehicle.getCar().getModel().getPrice(); Cognitive complexity Definition : It's a psychological characteristic or psychological variable that indicates how complex or simple is the frame and perceptual skill of a person In programming a method with nested if else's and larger size causes high cognitive complexity means less understandability. So better to split large methods into logically separated smaller ones and use above Nested If's trick to reduce it. Also SonarLint a static code analysis tool calculates this for you in realtime in android studio you can use sonar to see how you doing. Region Use regions to separate your code fragments in big classes like britisher's did with divide and rule policy, very effective ask indians. //region meaningful name of your logically separated region do your work here. //endregion Naming Short names for short living variables and good and meaningful names for long living ones because they'll be with you for a long-long time. They are family. For e.g. index variable within for loop can be 'i' but as class variable should be 'index' Parameter Object pattern There is no restriction to number of paramters passed in methods but it's a bad practice to pass more than 3 or 4, So if your methods contains a repeating group of parameters which are passed among several methods. We can avoid that by replacing these parameters with an object. No comments \"Code never lies, comments sometimes do.\" - Ron Jeffries * Always try to explain yourself in code because you're a coder not a commenter. * Don't add obvious noise. * Add comments for Public APIs. * Use it where necessary as time passes by code will change comment wouldn't. * You're being paid for coding not commenting. Use Abstract classes Create abstract classes to implement only those callbacks which you need. As SimpleTabSelectedListener below, No need to add onTabReselected, onTabUnselected if you don't need it. public abstract class SimpleTabSelectedListener implements TabLayout.OnTabSelectedListener { @Override public void onTabReselected(TabLayout.Tab tab) { } @Override public void onTabUnselected(TabLayout.Tab tab) { } } Must follow rules Horizontal and vertical formatting rule It's not a constraint but a formatting rule that should be followed to keep your code vertically and horizontally small so with just one glance you can read it all. Boy Scout rule Definition : Leave the campground cleaner than you found it Consistency If you do something in one way then do it the same way everywhere- Uncle Bob Keep it simple rule Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible - Uncle Bob Must have Android tools Android Lint Please, guy's, it must/have to be MANDATORY for EVERYBODY. The Android Lint utility is probably one of the most powerful tools in your arsenal that you are not using. I could come up with many reasons why developers don\u2019t seem to take full advantage of it, it's a shame. Lint even say when you have a miss spelling. SonarLint It's interesting to have, i have been using it and i got to know about this from a colleague, sometimes they can be helpful, kidding. It has several features best one to just scan the modified classes and it'll automatically criticise you for your bad code and how ugly you can be sometimes. BTW Cognitive complexity we talked earlier it helps. FindBugs It's a program that uses static code analysis to find bugs in java code just like SonarLint. To know more about FindBug check this. Flip a coin or whatever but pick one of these tools. Stupid mistakes by Developers Not using parcelable If you're not using it then you're making a mistake. Parcelable is designed for android. Parcelable is faster than serializable interface Parcelable interface takes more time for implemetation compared to serializable interface but there are plugins to automate it. Serializable interface is easier to implement Serializable interface create a lot of temporary objects and cause quite a bit of garbage collection Parcelable array can be pass via Intent in android Directly accessing variables If you're accessing another class variables using dot operator it'll become ugly with time. There is a reason why we have access modifiers keep your variables private and se getters to access those variables. This'll reduce code coupling. People who code in activity and fragments might know what i'm talking about. Creating too many class variables If you still remember class as in OOPs concept class represents an entity a noun. A class has attributes which define it's states and methods it's behavior. I have a totally different understanding from my experience I believe attributes are the real deal and methods they just work on it. So try to keep attributes which are relevant to class and trim those extra global variables(mostly booleans) you added for whatever reason. Parameter object pattern can be of some help her. The coding principles SOLID It's a mnemonic acronym that helps define the five basic object-oriented design principles Single Responsibility Principle Open-Closed Principle Liskov Substitution Principle Interface Segregation Principle Dependency Inversion Principle DRY principle Never ever write same piece of code twice make it your ironclad rule and strictly prohibit this in your kingdom. The Critics principle Okay it's totally made up but it's very logical. When you're reviewing code of your teammates don't be a friend, Be their arch enemy, don't let them make mistakes that you might have to clean someday. Cleaning other's shit will make your hand dirty. Enforce good practices in code reviews. Must have Android Libraries Android Debug Database Android Debug Database allows you to view databases and shared preferences directly in your browser in a very simple way. What can Android Debug Database do? See all the databases. See all the data in the shared preferences used in your application. Run any sql query on the given database to update and delete your data. Directly edit the database values. Directly edit the shared preferences. Directly add a row in the database. Directly add a key-value in the shared preferences. Delete database rows and shared preferences. Search in your data. Sort data. Download database. Debug Room inMemory database.","title":"Android"},{"location":"android/#android","text":"","title":"Android"},{"location":"android/#version-name","text":"CodeName Version Api level R 11 API 30 Android10 10 API 29 Pie 9 API 28 Oreo 8 API 26-27 Nougat 7 API 24-25 Ideally, the relationship would look more like this in the steady state: minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK) You\u2019ll hit the biggest audience with a low minSdkVersion and look and act the best by targeting and compiling with the latest SDK \u2014 a great way to #BuildBetterApps","title":"Version &amp; Name"},{"location":"android/#best-practice-writing-clean-code","text":"","title":"Best practice &amp; Writing clean code"},{"location":"android/#nested-ifs","text":"I hate this, I seriously do, you have statements which require multiple checks like this below code and it goes so deep really deep, In coding which is bad actually. if (vehicle != null) { if (vehicle.getCar() != null) { if (vehicle.getCar().getModel() != null) { int price = vehicle.getCar().getModel().getPrice(); } } } And the thing is, It can be avoided, you totally can, like this. As you see below one is more readable and easy to understand. if (vehicle == null || vehicle.getCar() == null || vehicle.getCar().getModel() == null) return; int price = vehicle.getCar().getModel().getPrice();","title":"Nested If's"},{"location":"android/#cognitive-complexity","text":"Definition : It's a psychological characteristic or psychological variable that indicates how complex or simple is the frame and perceptual skill of a person In programming a method with nested if else's and larger size causes high cognitive complexity means less understandability. So better to split large methods into logically separated smaller ones and use above Nested If's trick to reduce it. Also SonarLint a static code analysis tool calculates this for you in realtime in android studio you can use sonar to see how you doing.","title":"Cognitive complexity"},{"location":"android/#region","text":"Use regions to separate your code fragments in big classes like britisher's did with divide and rule policy, very effective ask indians. //region meaningful name of your logically separated region do your work here. //endregion","title":"Region"},{"location":"android/#naming","text":"Short names for short living variables and good and meaningful names for long living ones because they'll be with you for a long-long time. They are family. For e.g. index variable within for loop can be 'i' but as class variable should be 'index'","title":"Naming"},{"location":"android/#parameter-object-pattern","text":"There is no restriction to number of paramters passed in methods but it's a bad practice to pass more than 3 or 4, So if your methods contains a repeating group of parameters which are passed among several methods. We can avoid that by replacing these parameters with an object.","title":"Parameter Object pattern"},{"location":"android/#no-comments","text":"\"Code never lies, comments sometimes do.\" - Ron Jeffries * Always try to explain yourself in code because you're a coder not a commenter. * Don't add obvious noise. * Add comments for Public APIs. * Use it where necessary as time passes by code will change comment wouldn't. * You're being paid for coding not commenting.","title":"No comments"},{"location":"android/#use-abstract-classes","text":"Create abstract classes to implement only those callbacks which you need. As SimpleTabSelectedListener below, No need to add onTabReselected, onTabUnselected if you don't need it. public abstract class SimpleTabSelectedListener implements TabLayout.OnTabSelectedListener { @Override public void onTabReselected(TabLayout.Tab tab) { } @Override public void onTabUnselected(TabLayout.Tab tab) { } }","title":"Use Abstract classes"},{"location":"android/#must-follow-rules","text":"","title":"Must follow rules"},{"location":"android/#horizontal-and-vertical-formatting-rule","text":"It's not a constraint but a formatting rule that should be followed to keep your code vertically and horizontally small so with just one glance you can read it all.","title":"Horizontal and vertical formatting rule"},{"location":"android/#boy-scout-rule","text":"Definition : Leave the campground cleaner than you found it","title":"Boy Scout rule"},{"location":"android/#consistency","text":"If you do something in one way then do it the same way everywhere- Uncle Bob","title":"Consistency"},{"location":"android/#keep-it-simple-rule","text":"Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible - Uncle Bob","title":"Keep it simple rule"},{"location":"android/#must-have-android-tools","text":"","title":"Must have Android tools"},{"location":"android/#android-lint","text":"Please, guy's, it must/have to be MANDATORY for EVERYBODY. The Android Lint utility is probably one of the most powerful tools in your arsenal that you are not using. I could come up with many reasons why developers don\u2019t seem to take full advantage of it, it's a shame. Lint even say when you have a miss spelling.","title":"Android Lint"},{"location":"android/#sonarlint","text":"It's interesting to have, i have been using it and i got to know about this from a colleague, sometimes they can be helpful, kidding. It has several features best one to just scan the modified classes and it'll automatically criticise you for your bad code and how ugly you can be sometimes. BTW Cognitive complexity we talked earlier it helps.","title":"SonarLint"},{"location":"android/#findbugs","text":"It's a program that uses static code analysis to find bugs in java code just like SonarLint. To know more about FindBug check this. Flip a coin or whatever but pick one of these tools.","title":"FindBugs"},{"location":"android/#stupid-mistakes-by-developers","text":"","title":"Stupid mistakes by Developers"},{"location":"android/#not-using-parcelable","text":"If you're not using it then you're making a mistake. Parcelable is designed for android. Parcelable is faster than serializable interface Parcelable interface takes more time for implemetation compared to serializable interface but there are plugins to automate it. Serializable interface is easier to implement Serializable interface create a lot of temporary objects and cause quite a bit of garbage collection Parcelable array can be pass via Intent in android","title":"Not using parcelable"},{"location":"android/#directly-accessing-variables","text":"If you're accessing another class variables using dot operator it'll become ugly with time. There is a reason why we have access modifiers keep your variables private and se getters to access those variables. This'll reduce code coupling. People who code in activity and fragments might know what i'm talking about.","title":"Directly accessing variables"},{"location":"android/#creating-too-many-class-variables","text":"If you still remember class as in OOPs concept class represents an entity a noun. A class has attributes which define it's states and methods it's behavior. I have a totally different understanding from my experience I believe attributes are the real deal and methods they just work on it. So try to keep attributes which are relevant to class and trim those extra global variables(mostly booleans) you added for whatever reason. Parameter object pattern can be of some help her.","title":"Creating too many class variables"},{"location":"android/#the-coding-principles","text":"","title":"The coding principles"},{"location":"android/#solid","text":"It's a mnemonic acronym that helps define the five basic object-oriented design principles Single Responsibility Principle Open-Closed Principle Liskov Substitution Principle Interface Segregation Principle Dependency Inversion Principle","title":"SOLID"},{"location":"android/#dry-principle","text":"Never ever write same piece of code twice make it your ironclad rule and strictly prohibit this in your kingdom.","title":"DRY principle"},{"location":"android/#the-critics-principle","text":"Okay it's totally made up but it's very logical. When you're reviewing code of your teammates don't be a friend, Be their arch enemy, don't let them make mistakes that you might have to clean someday. Cleaning other's shit will make your hand dirty. Enforce good practices in code reviews.","title":"The Critics principle"},{"location":"android/#must-have-android-libraries","text":"","title":"Must have Android Libraries"},{"location":"android/#android-debug-database","text":"Android Debug Database allows you to view databases and shared preferences directly in your browser in a very simple way.","title":"Android Debug Database"},{"location":"android/#what-can-android-debug-database-do","text":"See all the databases. See all the data in the shared preferences used in your application. Run any sql query on the given database to update and delete your data. Directly edit the database values. Directly edit the shared preferences. Directly add a row in the database. Directly add a key-value in the shared preferences. Delete database rows and shared preferences. Search in your data. Sort data. Download database. Debug Room inMemory database.","title":"What can Android Debug Database do?"},{"location":"bsp/","text":"Bsp Bsp = Board support package In embedded systems, a board support package (BSP) is the layer of software containing hardware-specific drivers and other routines that allow a particular operating system (traditionally a real-time operating system, or RTOS) to function in a particular hardware environment (a computer or CPU card), integrated with the RTOS itself. Third-party hardware developers who wish to support a particular RTOS must create a BSP that allows that RTOS to run on their platform. In most cases the RTOS image and license, the BSP containing it, and the hardware are bundled together by the hardware vendor. Schema","title":"Bsp"},{"location":"bsp/#bsp","text":"","title":"Bsp"},{"location":"bsp/#bsp-board-support-package","text":"In embedded systems, a board support package (BSP) is the layer of software containing hardware-specific drivers and other routines that allow a particular operating system (traditionally a real-time operating system, or RTOS) to function in a particular hardware environment (a computer or CPU card), integrated with the RTOS itself. Third-party hardware developers who wish to support a particular RTOS must create a BSP that allows that RTOS to run on their platform. In most cases the RTOS image and license, the BSP containing it, and the hardware are bundled together by the hardware vendor.","title":"Bsp = Board support package"},{"location":"bsp/#schema","text":"","title":"Schema"},{"location":"custom_input/","text":"Custom input android bsp Usefull command 'getevent -l' check the hexa value then convert it to decimal 'dumpsys input' find where is the good one and check both of file ***.kl","title":"Custom input android bsp"},{"location":"custom_input/#custom-input-android-bsp","text":"Usefull command 'getevent -l' check the hexa value then convert it to decimal 'dumpsys input' find where is the good one and check both of file ***.kl","title":"Custom input android bsp"},{"location":"dex/","text":"Dex Dex = Dalvik Executable Format One of the most remarkable features of the Dalvik Virtual Machine (the workhorse under the Android system) is that it does not use Java bytecode. Instead, a homegrown format called DEX was introduced and not even the bytecode instructions are the same as Java bytecode instructions. Compiled Android application code file. Android programs are compiled into .dex (Dalvik Executable) files, which are in turn zipped into a single .apk file on the device. .dex files can be created by automatically translating compiled applications written in the Java programming language. Dex file format: 1. File Header 2. String Table 3. Class List 4. Field Table 5. Method Table 6. Class Definition Table 7. Field List 8. Method List 9. Code Header 10. Local Variable List Android has documentation on the Dalvik Executable Format (.dex files). You can find out more over at the official docs: Dex File Format .dex files are similar to java class files, but they were run under the Dalkvik Virtual Machine (DVM) on older Android versions, and compiled at install time on the device to native code with ART on newer Android versions. You can decompile .dex using the dexdump tool which is provided in android-sdk.","title":"Dex"},{"location":"dex/#dex","text":"","title":"Dex"},{"location":"dex/#dex-dalvik-executable-format","text":"One of the most remarkable features of the Dalvik Virtual Machine (the workhorse under the Android system) is that it does not use Java bytecode. Instead, a homegrown format called DEX was introduced and not even the bytecode instructions are the same as Java bytecode instructions. Compiled Android application code file. Android programs are compiled into .dex (Dalvik Executable) files, which are in turn zipped into a single .apk file on the device. .dex files can be created by automatically translating compiled applications written in the Java programming language. Dex file format: 1. File Header 2. String Table 3. Class List 4. Field Table 5. Method Table 6. Class Definition Table 7. Field List 8. Method List 9. Code Header 10. Local Variable List Android has documentation on the Dalvik Executable Format (.dex files). You can find out more over at the official docs: Dex File Format .dex files are similar to java class files, but they were run under the Dalkvik Virtual Machine (DVM) on older Android versions, and compiled at install time on the device to native code with ART on newer Android versions. You can decompile .dex using the dexdump tool which is provided in android-sdk.","title":"Dex = Dalvik Executable Format"},{"location":"eotf/","text":"EOTF Eotf = Electro-Optical Transfer Function This is a term used in HDR (opens in new tab)(high dynamic range) displays to describe the action of converting data to a particular brightness on the screen. The EOTF is the mathematical function for transferring an electronic signal into the desired optical signal (i.e. digital to analog function). This differs from gamma (opens in new tab) in that gamma tells a display to emit a certain percentage of its max brightness, while EOTF tells it how many nits of brightness to produce.","title":"EOTF"},{"location":"eotf/#eotf","text":"","title":"EOTF"},{"location":"eotf/#eotf-electro-optical-transfer-function","text":"This is a term used in HDR (opens in new tab)(high dynamic range) displays to describe the action of converting data to a particular brightness on the screen. The EOTF is the mathematical function for transferring an electronic signal into the desired optical signal (i.e. digital to analog function). This differs from gamma (opens in new tab) in that gamma tells a display to emit a certain percentage of its max brightness, while EOTF tells it how many nits of brightness to produce.","title":"Eotf = Electro-Optical Transfer Function"},{"location":"epg/","text":"Epg EPG = Electronic Program Guide Electronic programming guides (EPGs) and interactive programming guides (IPGs) are menu-based systems that provide users of television. Radio and other media applications with continuously updated menus that display scheduling information for current and upcoming broadcast programming (most commonly, TV listings). Some guides also feature backward scrolling to promote their catch up content. They are commonly known as guides or TV guides. Non-interactive electronic programming guides (sometimes known as \"navigation software\") are typically available for television and radio, and consist of a digitally displayed, non-interactive menu of programming scheduling information shown by a cable or satellite television provider to its viewers on a dedicated channel. EPGs are transmitted by specialized video character generation (CG) equipment housed within each such provider's central headend facility. By tuning into an EPG channel, a menu is displayed that lists current and upcoming television shows on all available channels. A more modern form of the EPG, associated with both television and radio broadcasting, is the interactive [electronic] programming guide (IPG, though often referred to as EPG). An IPG allows television viewers and radio listeners to navigate scheduling information menus interactively, selecting and discovering programming by time, title, channel or genre using an input device such as a keypad, computer keyboard or television remote control. Its interactive menus are generated entirely within local receiving or display equipment using raw scheduling data sent by individual broadcast stations or centralized scheduling information providers. A typical IPG provides information covering a span of seven or 14 days. Data used to populate an interactive EPG may be distributed over the Internet, either for a charge or free of charge, and implemented on equipment connected directly or through a computer to the Internet. Television-based IPGs in conjunction with Programme Delivery Control (PDC) technology can also facilitate the selection of TV shows for recording with digital video recorders (DVRs), also known as personal video recorders (PVRs)","title":"Epg"},{"location":"epg/#epg","text":"","title":"Epg"},{"location":"epg/#epg-electronic-program-guide","text":"Electronic programming guides (EPGs) and interactive programming guides (IPGs) are menu-based systems that provide users of television. Radio and other media applications with continuously updated menus that display scheduling information for current and upcoming broadcast programming (most commonly, TV listings). Some guides also feature backward scrolling to promote their catch up content. They are commonly known as guides or TV guides. Non-interactive electronic programming guides (sometimes known as \"navigation software\") are typically available for television and radio, and consist of a digitally displayed, non-interactive menu of programming scheduling information shown by a cable or satellite television provider to its viewers on a dedicated channel. EPGs are transmitted by specialized video character generation (CG) equipment housed within each such provider's central headend facility. By tuning into an EPG channel, a menu is displayed that lists current and upcoming television shows on all available channels. A more modern form of the EPG, associated with both television and radio broadcasting, is the interactive [electronic] programming guide (IPG, though often referred to as EPG). An IPG allows television viewers and radio listeners to navigate scheduling information menus interactively, selecting and discovering programming by time, title, channel or genre using an input device such as a keypad, computer keyboard or television remote control. Its interactive menus are generated entirely within local receiving or display equipment using raw scheduling data sent by individual broadcast stations or centralized scheduling information providers. A typical IPG provides information covering a span of seven or 14 days. Data used to populate an interactive EPG may be distributed over the Internet, either for a charge or free of charge, and implemented on equipment connected directly or through a computer to the Internet. Television-based IPGs in conjunction with Programme Delivery Control (PDC) technology can also facilitate the selection of TV shows for recording with digital video recorders (DVRs), also known as personal video recorders (PVRs)","title":"EPG = Electronic Program Guide"},{"location":"fqdn/","text":"Fqdn FQDN = Fully Qualified Domain Names A fully qualified domain name (FQDN) is the complete domain name for a specific computer, or host, on the internet. The FQDN consists of two parts: the hostname and the domain name. For example, an FQDN for a hypothetical mail server might be mymail.somecollege.edu. The hostname is mymail, and the host is located within the domain somecollege.edu. Ssh client ? When connecting to a host (using an SSH client, for example) * You must specify the FQDN. * The DNS server then resolves the hostname to its IP address by looking at its DNS table. * The host is contacted and you receive a login prompt.","title":"Fqdn"},{"location":"fqdn/#fqdn","text":"","title":"Fqdn"},{"location":"fqdn/#fqdn-fully-qualified-domain-names","text":"A fully qualified domain name (FQDN) is the complete domain name for a specific computer, or host, on the internet. The FQDN consists of two parts: the hostname and the domain name. For example, an FQDN for a hypothetical mail server might be mymail.somecollege.edu. The hostname is mymail, and the host is located within the domain somecollege.edu.","title":"FQDN = Fully Qualified Domain Names"},{"location":"fqdn/#ssh-client","text":"When connecting to a host (using an SSH client, for example) * You must specify the FQDN. * The DNS server then resolves the hostname to its IP address by looking at its DNS table. * The host is contacted and you receive a login prompt.","title":"Ssh client ?"},{"location":"ftth/","text":"Ftth FTTH = Fiber To The Home Fiber to the home (FTTH), also called fiber to the premises (FTTP), is the installation and use of optical fiber from a central point directly to individual buildings such as residences, apartment buildings and businesses to provide high-speed internet access. FTTH dramatically increases connection speeds available to computer users compared with technologies now used in most places. Schema global Schema pon","title":"Ftth"},{"location":"ftth/#ftth","text":"","title":"Ftth"},{"location":"ftth/#ftth-fiber-to-the-home","text":"Fiber to the home (FTTH), also called fiber to the premises (FTTP), is the installation and use of optical fiber from a central point directly to individual buildings such as residences, apartment buildings and businesses to provide high-speed internet access. FTTH dramatically increases connection speeds available to computer users compared with technologies now used in most places.","title":"FTTH = Fiber To The Home"},{"location":"ftth/#schema-global","text":"","title":"Schema global"},{"location":"ftth/#schema-pon","text":"","title":"Schema pon"},{"location":"gerrit/","text":"Gerrit The refs/for namespace When pushing a new or updated commit to Gerrit, you push that commit using a reference, in the refs/for namespace. This reference must also define the target branch, such as refs/for/[BRANCH_NAME]. For example, to create a new change on the master branch, you would use the following command: git push origin HEAD:refs/for/master The refs/for/[BRANCH_NAME] syntax allows Gerrit to differentiate between commits that are pushed for review and commits that are pushed directly into the repository. Gerrit supports using either the full name or the short name for a branch. For instance, this command: git commit git push origin HEAD:refs/for/master is the same as: git commit git push origin HEAD:refs/for/refs/heads/master Gerrit uses the refs/for/ prefix to map the concept of \"Pushing for Review\" to the git protocol. For the git client, it looks like every push goes to the same branch, such as refs/for/master. In fact, for each commit pushed to this ref, Gerrit creates a new ref under a refs/changes/ namespace, which Gerrit uses to track these commits. These references use the following format: refs/changes/[CD]/[ABCD]/[EF] Where: [CD] is the last two digits of the change number [ABCD] is the change number [EF] is the patch set number For example: refs/changes/20/884120/1 You can use the change reference to fetch its corresponding commit: git fetch https://[GERRIT_SERVER_URL]/[PROJECT] refs/changes/[XX]/[YYYY]/[ZZ] \\ && git checkout FETCH_HEAD","title":"Gerrit"},{"location":"gerrit/#gerrit","text":"","title":"Gerrit"},{"location":"gerrit/#the-refsfor-namespace","text":"When pushing a new or updated commit to Gerrit, you push that commit using a reference, in the refs/for namespace. This reference must also define the target branch, such as refs/for/[BRANCH_NAME]. For example, to create a new change on the master branch, you would use the following command: git push origin HEAD:refs/for/master The refs/for/[BRANCH_NAME] syntax allows Gerrit to differentiate between commits that are pushed for review and commits that are pushed directly into the repository. Gerrit supports using either the full name or the short name for a branch. For instance, this command: git commit git push origin HEAD:refs/for/master is the same as: git commit git push origin HEAD:refs/for/refs/heads/master Gerrit uses the refs/for/ prefix to map the concept of \"Pushing for Review\" to the git protocol. For the git client, it looks like every push goes to the same branch, such as refs/for/master. In fact, for each commit pushed to this ref, Gerrit creates a new ref under a refs/changes/ namespace, which Gerrit uses to track these commits. These references use the following format: refs/changes/[CD]/[ABCD]/[EF] Where: [CD] is the last two digits of the change number [ABCD] is the change number [EF] is the patch set number For example: refs/changes/20/884120/1 You can use the change reference to fetch its corresponding commit: git fetch https://[GERRIT_SERVER_URL]/[PROJECT] refs/changes/[XX]/[YYYY]/[ZZ] \\ && git checkout FETCH_HEAD","title":"The refs/for namespace"},{"location":"gtvs/","text":"Gtvs GTVS = Google TV Services & Android TV Android TV, allows you to use the Android TV brand and adds support for all Google TV services (GTVS) which allows operators to gain access to additional features to improve their pay TV service. A version of the Android operating system developed by Google for television sets, digital media players, set-top boxes, and soundbars. A successor to Google TV, it features a user interface designed around content discovery and voice search, content aggregation from various media apps and services, and integration with other recent Google technologies such as Assistant, Cast, and Knowledge Graph. The platform was first unveiled in June 2014, and was first made available on the Nexus Player that November. The platform has been adopted as smart TV middleware by companies such as Sony and Sharp, while Android TV products have also been adopted as set-top boxes by a number of IPTV television providers. A special edition called Android TV Operator Tier is provided to service operators that implement Android TV on the device they provide to their subscribers to access media content. In this edition, the operator can customize the home screen and services on the device. List of devices The ADT-1 digital media player, part of the official development kit for Android TV Digital media players Nexus Player (discontinued) Nvidia Shield TV Razer Forge TV (discontinued) Xiaomi Mi Box, Mi Box S, and Mi TV Stick Now TV Verizon Stream TV TiVo Stream 4K Vodafone TV (AU) Airtel Xstream Box (India) Chromecast with Google TV Televisions During Google I/O 2014, Google announced that Sharp, Sony, and TP Vision would release smart TVs with Android TV integrated in 2015. It was noted that support for handling TV-specific functions, such as input switching and tuning, were natively integrated into the Android platform. Sony unveiled a range of Bravia smart TVs running Android TV at CES 2015.Sharp released two TV models on June 10, 2015. Philips announced that 80% of their 2015 TVs will run Android TV, the first two models of which were released in June 2015. Google announced other television hardware partners in January 2016, including Arcelik, Bang & Olufsen, Hisense, RCA, TCL Corporation, and Vestel. Set-top boxes Several television providers have released IPTV services using Android TV-based hardware as opposed to a proprietary set-top box, including LG UPlus's U+ tvG Woofer and U+ tvG 4K UHD, French ISP Free's Freebox Mini 4K, and Bouygues Telecom's BBox Miami. Dish Network released an Android TV device in 2017 known as the AirTV Player, marketed as a companion to its Sling TV service, and supporting an optional adapter for attaching an antenna to receive over-the-air television. In 2020, AT&T launched AT&T TV as its new flagship pay television service, which is based on an Android TV set-top box and the infrastructure of its OTT service DirecTV Now. Ericsson added Android TV support to its MediaFirst IPTV platform, which is used as the basis for Canadian services such as Telus Pik TV, and SaskTel MaxTV Stream. Vodafone Australia is currently selling a TV tuner and media streaming device running Android TV.","title":"Gtvs"},{"location":"gtvs/#gtvs","text":"","title":"Gtvs"},{"location":"gtvs/#gtvs-google-tv-services-android-tv","text":"Android TV, allows you to use the Android TV brand and adds support for all Google TV services (GTVS) which allows operators to gain access to additional features to improve their pay TV service. A version of the Android operating system developed by Google for television sets, digital media players, set-top boxes, and soundbars. A successor to Google TV, it features a user interface designed around content discovery and voice search, content aggregation from various media apps and services, and integration with other recent Google technologies such as Assistant, Cast, and Knowledge Graph. The platform was first unveiled in June 2014, and was first made available on the Nexus Player that November. The platform has been adopted as smart TV middleware by companies such as Sony and Sharp, while Android TV products have also been adopted as set-top boxes by a number of IPTV television providers. A special edition called Android TV Operator Tier is provided to service operators that implement Android TV on the device they provide to their subscribers to access media content. In this edition, the operator can customize the home screen and services on the device.","title":"GTVS = Google TV Services &amp; Android TV"},{"location":"gtvs/#list-of-devices","text":"The ADT-1 digital media player, part of the official development kit for Android TV Digital media players Nexus Player (discontinued) Nvidia Shield TV Razer Forge TV (discontinued) Xiaomi Mi Box, Mi Box S, and Mi TV Stick Now TV Verizon Stream TV TiVo Stream 4K Vodafone TV (AU) Airtel Xstream Box (India) Chromecast with Google TV","title":"List of devices"},{"location":"gtvs/#televisions","text":"During Google I/O 2014, Google announced that Sharp, Sony, and TP Vision would release smart TVs with Android TV integrated in 2015. It was noted that support for handling TV-specific functions, such as input switching and tuning, were natively integrated into the Android platform. Sony unveiled a range of Bravia smart TVs running Android TV at CES 2015.Sharp released two TV models on June 10, 2015. Philips announced that 80% of their 2015 TVs will run Android TV, the first two models of which were released in June 2015. Google announced other television hardware partners in January 2016, including Arcelik, Bang & Olufsen, Hisense, RCA, TCL Corporation, and Vestel.","title":"Televisions"},{"location":"gtvs/#set-top-boxes","text":"Several television providers have released IPTV services using Android TV-based hardware as opposed to a proprietary set-top box, including LG UPlus's U+ tvG Woofer and U+ tvG 4K UHD, French ISP Free's Freebox Mini 4K, and Bouygues Telecom's BBox Miami. Dish Network released an Android TV device in 2017 known as the AirTV Player, marketed as a companion to its Sling TV service, and supporting an optional adapter for attaching an antenna to receive over-the-air television. In 2020, AT&T launched AT&T TV as its new flagship pay television service, which is based on an Android TV set-top box and the infrastructure of its OTT service DirecTV Now. Ericsson added Android TV support to its MediaFirst IPTV platform, which is used as the basis for Canadian services such as Telus Pik TV, and SaskTel MaxTV Stream. Vodafone Australia is currently selling a TV tuner and media streaming device running Android TV.","title":"Set-top boxes"},{"location":"hdcp/","text":"Hdcp HDCP = High-bandwidth Digital Content Protection It'ss a form of digital copy protection developed by Intel Corporation[1] to prevent copying of digital audio and video content as it travels across connections. Types of connections include DisplayPort (DP), Digital Visual Interface (DVI), and High-Definition Multimedia Interface (HDMI), as well as less popular or now deprecated protocols like Gigabit Video Interface (GVIF) and Unified Display Interface (UDI). HDCP uses three systems Authentication prevents non-licensed devices from receiving content. Encryption of the data sent over DisplayPort, DVI, HDMI, GVIF, or UDI interfaces prevents eavesdropping of information and man-in-the-middle attacks. Key revocation prevents devices that have been compromised and cloned from receiving data. On Android try to check the Display flags: http://developer.android.com/reference/android/view/Display.html#getFlags() FLAG_SECURE or FLAG_SUPPORTS_PROTECTED_BUFFERS (http://developer.android.com/reference/android/view/Display.html#FLAG_SECURE and http://developer.android.com/reference/android/view/Display.html#FLAG_SUPPORTS_PROTECTED_BUFFERS)","title":"Hdcp"},{"location":"hdcp/#hdcp","text":"","title":"Hdcp"},{"location":"hdcp/#hdcp-high-bandwidth-digital-content-protection","text":"It'ss a form of digital copy protection developed by Intel Corporation[1] to prevent copying of digital audio and video content as it travels across connections. Types of connections include DisplayPort (DP), Digital Visual Interface (DVI), and High-Definition Multimedia Interface (HDMI), as well as less popular or now deprecated protocols like Gigabit Video Interface (GVIF) and Unified Display Interface (UDI).","title":"HDCP = High-bandwidth Digital Content Protection"},{"location":"hdcp/#hdcp-uses-three-systems","text":"Authentication prevents non-licensed devices from receiving content. Encryption of the data sent over DisplayPort, DVI, HDMI, GVIF, or UDI interfaces prevents eavesdropping of information and man-in-the-middle attacks. Key revocation prevents devices that have been compromised and cloned from receiving data.","title":"HDCP uses three systems"},{"location":"hdcp/#on-android","text":"try to check the Display flags: http://developer.android.com/reference/android/view/Display.html#getFlags() FLAG_SECURE or FLAG_SUPPORTS_PROTECTED_BUFFERS (http://developer.android.com/reference/android/view/Display.html#FLAG_SECURE and http://developer.android.com/reference/android/view/Display.html#FLAG_SUPPORTS_PROTECTED_BUFFERS)","title":"On Android"},{"location":"hdr/","text":"","title":"Hdr"},{"location":"iad/","text":"Iad IAD = Integrated Access Device An Integrated Access Device (or IAD) allows customers to continue using their legacy TDM voice equipment (PBX, Channel Bank, etc...) without the need to invest in new Voice over Internet Protocol (VoIP) capable equipment. This also allows customers in locations where legacy TDM services are no longer available to delay expensive equipment upgrades required to move to a pure Voice over IP (VoIP) solution. Schema","title":"Iad"},{"location":"iad/#iad","text":"","title":"Iad"},{"location":"iad/#iad-integrated-access-device","text":"An Integrated Access Device (or IAD) allows customers to continue using their legacy TDM voice equipment (PBX, Channel Bank, etc...) without the need to invest in new Voice over Internet Protocol (VoIP) capable equipment. This also allows customers in locations where legacy TDM services are no longer available to delay expensive equipment upgrades required to move to a pure Voice over IP (VoIP) solution.","title":"IAD = Integrated Access Device"},{"location":"iad/#schema","text":"","title":"Schema"},{"location":"lsn/","text":"lsn LSN = Large scale NAT","title":"lsn"},{"location":"lsn/#lsn","text":"","title":"lsn"},{"location":"lsn/#lsn-large-scale-nat","text":"","title":"LSN = Large scale NAT"},{"location":"nat/","text":"Nat NAT = Network Address Translation Network address translation (NAT) is a method of remapping an IP address space into another by modifying network address information in the IP header of packets while they are in transit across a traffic routing device. The technique was originally used to avoid the need to assign a new address to every host when a network was moved, or when the upstream Internet service provider was replaced, but could not route the networks address space. It has become a popular and essential tool in conserving global address space in the face of IPv4 address exhaustion. One Internet-routable IP address of a NAT gateway can be used for an entire private network. Schema","title":"Nat"},{"location":"nat/#nat","text":"","title":"Nat"},{"location":"nat/#nat-network-address-translation","text":"Network address translation (NAT) is a method of remapping an IP address space into another by modifying network address information in the IP header of packets while they are in transit across a traffic routing device. The technique was originally used to avoid the need to assign a new address to every host when a network was moved, or when the upstream Internet service provider was replaced, but could not route the networks address space. It has become a popular and essential tool in conserving global address space in the face of IPv4 address exhaustion. One Internet-routable IP address of a NAT gateway can be used for an entire private network.","title":"NAT = Network Address Translation"},{"location":"nat/#schema","text":"","title":"Schema"},{"location":"olt/","text":"Olt OLT = Optical Line Terminal OLT is the starting point for the passive optical network, which is connected to a core switch through Ethernet cables. The primary function of the OLT is to convert, frame, and transmit signals for the PON network and to coordinate the optical network terminals multiplexing for the shared upstream transmission. In general, OLT equipment contains rack, CSM (Control and Switch Module), ELM (EPON Link Module, PON card), redundancy protection -48V DC power supply modules or one 110/220V AC power supply module, and fans. In these parts, PON card and power supply support hot-swap while another module is built inside. The OLT has two float directions: upstream (getting distributing different types of data and voice traffic from users) and downstream (getting data, voice, and video traffic from the metro network or from a long-haul network and send it to all ONT modules on the ODN.) The maximum distance supported for transmitting across the ODN is 20 km. Photo","title":"Olt"},{"location":"olt/#olt","text":"","title":"Olt"},{"location":"olt/#olt-optical-line-terminal","text":"OLT is the starting point for the passive optical network, which is connected to a core switch through Ethernet cables. The primary function of the OLT is to convert, frame, and transmit signals for the PON network and to coordinate the optical network terminals multiplexing for the shared upstream transmission. In general, OLT equipment contains rack, CSM (Control and Switch Module), ELM (EPON Link Module, PON card), redundancy protection -48V DC power supply modules or one 110/220V AC power supply module, and fans. In these parts, PON card and power supply support hot-swap while another module is built inside. The OLT has two float directions: upstream (getting distributing different types of data and voice traffic from users) and downstream (getting data, voice, and video traffic from the metro network or from a long-haul network and send it to all ONT modules on the ODN.) The maximum distance supported for transmitting across the ODN is 20 km.","title":"OLT = Optical Line Terminal"},{"location":"olt/#photo","text":"","title":"Photo"},{"location":"ont/","text":"Ont ONT = Optical Network Termination Optical Network Unit (ONU) / Optical Network Terminal (ONT) ONU converts optical signals transmitted via fibers to electrical signals. These electrical signals are then sent to individual subscribers. In general, there is a distance or other access network between ONU and end user's premises. Furthermore, ONU can send, aggregate, and groom different types of data coming from the customer and send it upstream to the OLT. Grooming is the process that optimizes and reorganizes the data stream so it would be delivered more efficiently. OLT supports bandwidth allocation that allows making smooth delivery of data float to the OLT, which usually arrives in bursts from the customer. ONU could be connected by various methods and cable types, like twisted-pair copper wire, coaxial cable, optical fiber, or through Wi-Fi. Schema Photo","title":"Ont"},{"location":"ont/#ont","text":"","title":"Ont"},{"location":"ont/#ont-optical-network-termination","text":"Optical Network Unit (ONU) / Optical Network Terminal (ONT) ONU converts optical signals transmitted via fibers to electrical signals. These electrical signals are then sent to individual subscribers. In general, there is a distance or other access network between ONU and end user's premises. Furthermore, ONU can send, aggregate, and groom different types of data coming from the customer and send it upstream to the OLT. Grooming is the process that optimizes and reorganizes the data stream so it would be delivered more efficiently. OLT supports bandwidth allocation that allows making smooth delivery of data float to the OLT, which usually arrives in bursts from the customer. ONU could be connected by various methods and cable types, like twisted-pair copper wire, coaxial cable, optical fiber, or through Wi-Fi.","title":"ONT = Optical Network Termination"},{"location":"ont/#schema","text":"","title":"Schema"},{"location":"ont/#photo","text":"","title":"Photo"},{"location":"osi/","text":"Osi OSI model = Open Systems Interconnection model The Open Systems Interconnection model (OSI model) is a conceptual model that characterises and standardises the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols. Schema Layer Name Description 7 Application The top layer (apart from layer 8, the user) is responsible for a wide area. Some examples are resource sharing, remote file access, remote printer access and e-mail amongst other. Protocols using layer 7 includes FTP, DNS, and HTTP. 6 Presentation This layer is responsible for character code translation such as ASCII, Unicode, and EBCDIC. TLS and SSL protocols operate at this level. 5 Session Layer 5 is responsible for session establishment, termination and maintenance of sessions. Here we find the NetBIOS protocol and L2TP tunneling protocol. 4 Transport This layer is responsible for traffic control, session-multiplexing and segmenting messages. Two commonly used protocols are TCP and UDP. 3 Network The network layer is responsible for routing network packages. The layer provides traffic control, local addressing, and fragmentation. The most used protocol is IP, ICMP, and IGMP 2 Data Link This layer is responsible for link establishment, acknowledgment, error-checking to name a few. Protocols operating here are the 802.3 (Ethernet), ARP and LLDP (Link Layer Discovery Protocol). 1 Physical This layer is responsible for transmission and reception of the physical medium. Protocols like DSL and USB use layer 1.","title":"Osi"},{"location":"osi/#osi","text":"","title":"Osi"},{"location":"osi/#osi-model-open-systems-interconnection-model","text":"The Open Systems Interconnection model (OSI model) is a conceptual model that characterises and standardises the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols.","title":"OSI model = Open Systems Interconnection model"},{"location":"osi/#schema","text":"Layer Name Description 7 Application The top layer (apart from layer 8, the user) is responsible for a wide area. Some examples are resource sharing, remote file access, remote printer access and e-mail amongst other. Protocols using layer 7 includes FTP, DNS, and HTTP. 6 Presentation This layer is responsible for character code translation such as ASCII, Unicode, and EBCDIC. TLS and SSL protocols operate at this level. 5 Session Layer 5 is responsible for session establishment, termination and maintenance of sessions. Here we find the NetBIOS protocol and L2TP tunneling protocol. 4 Transport This layer is responsible for traffic control, session-multiplexing and segmenting messages. Two commonly used protocols are TCP and UDP. 3 Network The network layer is responsible for routing network packages. The layer provides traffic control, local addressing, and fragmentation. The most used protocol is IP, ICMP, and IGMP 2 Data Link This layer is responsible for link establishment, acknowledgment, error-checking to name a few. Protocols operating here are the 802.3 (Ethernet), ARP and LLDP (Link Layer Discovery Protocol). 1 Physical This layer is responsible for transmission and reception of the physical medium. Protocols like DSL and USB use layer 1.","title":"Schema"},{"location":"ott/","text":"Ott / Iptv OTT = Over-the-top media service An over-the-top (OTT) media service is a streaming media service offered directly to viewers via the Internet. OTT bypasses cable, broadcast, and satellite television platforms, the companies that traditionally act as a controller or distributor of such content. It has also been used to describe no-carrier cellphones, where all communications are charged as data, avoiding monopolistic competition, or apps for phones that transmit data in this manner, including both those that replace other call methods and those that update software. The term is most synonymous with subscription-based video-on-demand (SVoD) services that offer access to film and television content (including existing series acquired from other producers, as well as original content produced specifically for the service). Types of content OTT television OTT television, usually called online television or internet television or streaming television, remains the most popular OTT content. OTT messaging OTT messaging is defined as instant messaging services or online chat provided by third parties, as an alternative to text messaging services provided by a mobile network operator. An example is the Facebook-owned mobile application WhatsApp, that serves to replace text messaging on Internet connected smartphones. Other providers of OTT messaging include Viber, WeChat, FaceTime, Skype, Telegram and the now defunct Google Allo. OTT voice calling OTT voice calling, usually called VoIP, capabilities, for instance, as provided by Skype, WeChat, Viber, and WhatsApp use open internet communication protocols to replace and sometimes enhance existing operator controlled services offered by mobile phone operators IPTV = Internet Protocol TV Internet Protocol television (IPTV) is the delivery of television content over Internet Protocol (IP) networks. This is in contrast to delivery through traditional terrestrial, satellite, and cable television formats. Unlike downloaded media, IPTV offers the ability to stream the source media continuously. As a result, a client media player can begin playing the content (such as a TV channel) almost immediately. This is known as streaming media. IPTV / OTT OTT In OTT, the video streaming uses the publicly accessible Internet connection. Thus it can be picked up externally. The content transmission is from a third party sectors like Netflix and YouTube. Pros: Price: Monthly prices as lows as $5, with much free content on YouTube and Hulu. Installation: All you need is a laptop or phone. (Having a streaming TV box like the Roku or Apple TV enhances the experience, though.) Programming: Wide choice of providers, with Netflix and others now offering original programming similar to cable. Cons: Quality: Subject to Internet speed, with \u201cbuffering\u201d and other wait-times common for slow connections and peak-hour viewing. Programming: While most shows can be found via major streaming services, some are cable-only and they generally don\u2019t reach OTT streaming until the end of the season. Data caps: Many ISPs now have limits on how much data you can consume, putting a limit on how much you can watch each month, even with unlimited plans IPTV IP stands for Internet Protocol, the \u201clanguage\u201d used to transfer packets of data between computers attached to the Internet network. IPTV is a platform where videos are used as per protocol streaming. This makes it a private managed content delivery network. Pros: Quality: High-quality video with fewer interruptions than OTT streaming due to privately managed content delivery network. Programming: View-on-demand and get shows date of release. Installation: Requires no special installation aside from a set-top box, assuming you already have broadband Internet. Cons: Price: Sold as a subscription at comparable rates to cable TV. Quality: Since it comes over the Internet, it can get slowed down during peak hours. IPTV services can be classified into three main groups: Live television: With or without interactivity related to the current TV show. Time-shifted television: Catch-up TV (replays a TV show that was broadcast hours or days ago), Start-over TV (replays the current TV show from its beginning) Video on demand (VOD): Browse a catalog of videos, not related to TV programming.","title":"Ott / Iptv"},{"location":"ott/#ott-iptv","text":"","title":"Ott / Iptv"},{"location":"ott/#ott-over-the-top-media-service","text":"An over-the-top (OTT) media service is a streaming media service offered directly to viewers via the Internet. OTT bypasses cable, broadcast, and satellite television platforms, the companies that traditionally act as a controller or distributor of such content. It has also been used to describe no-carrier cellphones, where all communications are charged as data, avoiding monopolistic competition, or apps for phones that transmit data in this manner, including both those that replace other call methods and those that update software. The term is most synonymous with subscription-based video-on-demand (SVoD) services that offer access to film and television content (including existing series acquired from other producers, as well as original content produced specifically for the service).","title":"OTT = Over-the-top media service"},{"location":"ott/#types-of-content","text":"","title":"Types of content"},{"location":"ott/#ott-television","text":"OTT television, usually called online television or internet television or streaming television, remains the most popular OTT content.","title":"OTT television"},{"location":"ott/#ott-messaging","text":"OTT messaging is defined as instant messaging services or online chat provided by third parties, as an alternative to text messaging services provided by a mobile network operator. An example is the Facebook-owned mobile application WhatsApp, that serves to replace text messaging on Internet connected smartphones. Other providers of OTT messaging include Viber, WeChat, FaceTime, Skype, Telegram and the now defunct Google Allo.","title":"OTT messaging"},{"location":"ott/#ott-voice-calling","text":"OTT voice calling, usually called VoIP, capabilities, for instance, as provided by Skype, WeChat, Viber, and WhatsApp use open internet communication protocols to replace and sometimes enhance existing operator controlled services offered by mobile phone operators","title":"OTT voice calling"},{"location":"ott/#iptv-internet-protocol-tv","text":"Internet Protocol television (IPTV) is the delivery of television content over Internet Protocol (IP) networks. This is in contrast to delivery through traditional terrestrial, satellite, and cable television formats. Unlike downloaded media, IPTV offers the ability to stream the source media continuously. As a result, a client media player can begin playing the content (such as a TV channel) almost immediately. This is known as streaming media.","title":"IPTV = Internet Protocol TV"},{"location":"ott/#iptv-ott","text":"","title":"IPTV / OTT"},{"location":"ott/#ott","text":"In OTT, the video streaming uses the publicly accessible Internet connection. Thus it can be picked up externally. The content transmission is from a third party sectors like Netflix and YouTube. Pros: Price: Monthly prices as lows as $5, with much free content on YouTube and Hulu. Installation: All you need is a laptop or phone. (Having a streaming TV box like the Roku or Apple TV enhances the experience, though.) Programming: Wide choice of providers, with Netflix and others now offering original programming similar to cable. Cons: Quality: Subject to Internet speed, with \u201cbuffering\u201d and other wait-times common for slow connections and peak-hour viewing. Programming: While most shows can be found via major streaming services, some are cable-only and they generally don\u2019t reach OTT streaming until the end of the season. Data caps: Many ISPs now have limits on how much data you can consume, putting a limit on how much you can watch each month, even with unlimited plans","title":"OTT"},{"location":"ott/#iptv","text":"IP stands for Internet Protocol, the \u201clanguage\u201d used to transfer packets of data between computers attached to the Internet network. IPTV is a platform where videos are used as per protocol streaming. This makes it a private managed content delivery network. Pros: Quality: High-quality video with fewer interruptions than OTT streaming due to privately managed content delivery network. Programming: View-on-demand and get shows date of release. Installation: Requires no special installation aside from a set-top box, assuming you already have broadband Internet. Cons: Price: Sold as a subscription at comparable rates to cable TV. Quality: Since it comes over the Internet, it can get slowed down during peak hours. IPTV services can be classified into three main groups: Live television: With or without interactivity related to the current TV show. Time-shifted television: Catch-up TV (replays a TV show that was broadcast hours or days ago), Start-over TV (replays the current TV show from its beginning) Video on demand (VOD): Browse a catalog of videos, not related to TV programming.","title":"IPTV"},{"location":"pvr/","text":"Pvr PVR = Personal video recorder or Digital Video Recorder It's an electronic device that records video in a digital format to a USB flash drive, SD memory card, SSD or other local or networked mass storage device. The term includes set-top boxes with direct to disk recording, portable media players and TV gateways with recording capability, and digital camcorders. Personal computers are often connected to video capture devices and used as DVRs; in such cases the application software used to record video is an integral part of the DVR. Many DVRs are classified as consumer electronic devices; such devices may alternatively be referred to as personal video recorders (PVRs), particularly in Canada. Similar small devices with built-in (~5 inch diagonal) displays and SSD support may be used for professional film or video production, as these recorders often do not have the limitations that built-in recorders in cameras have, offering wider codec support, the removal of recording time limitations and higher bitrates.","title":"Pvr"},{"location":"pvr/#pvr","text":"","title":"Pvr"},{"location":"pvr/#pvr-personal-video-recorder-or-digital-video-recorder","text":"It's an electronic device that records video in a digital format to a USB flash drive, SD memory card, SSD or other local or networked mass storage device. The term includes set-top boxes with direct to disk recording, portable media players and TV gateways with recording capability, and digital camcorders. Personal computers are often connected to video capture devices and used as DVRs; in such cases the application software used to record video is an integral part of the DVR. Many DVRs are classified as consumer electronic devices; such devices may alternatively be referred to as personal video recorders (PVRs), particularly in Canada. Similar small devices with built-in (~5 inch diagonal) displays and SSD support may be used for professional film or video production, as these recorders often do not have the limitations that built-in recorders in cameras have, offering wider codec support, the removal of recording time limitations and higher bitrates.","title":"PVR = Personal video recorder or Digital Video Recorder"},{"location":"selinux/","text":"Selinux SElinux = Security-Enhanced Linux As part of the Android security model. Android uses SELinux to enforce mandatory access control (MAC) over all processes. Even processes running with root/superuser privileges (a.k.a. Linux capabilities). SELinux enhances Android security by confining privileged processes and automating security policy creation. Operation SELinux operates on the principle of default denial: Anything not explicitly allowed is denied. SELinux can operate in two global modes - Permissive mode, in which permission denials are logged but not enforced. - Enforcing mode, in which permissions denials are both logged and enforced. Schema Version SElinux 5.0 SELinux is fully enforced 6.0 isolation between users, IOCTL filtering 7.0 SELinux configuration to further lock down the application sandbox and reduce attack surface 8.0 updated SELinux to work with Treble, which separates the lower-level vendor code from the Android system framework Software stack Device hardware : Android runs on a wide range of hardware configurations including mobile phones, smart TVs, OTT gaming boxes, and set-top-boxes. Android is processor-agnostic, but it takes advantage of some hardware-specific security capabilities such as ARM eXecute-Never. Android operating system : The core operating system is built on top of the Linux kernel. All device resources, like camera functions, GPS data, Bluetooth functions, telephony functions, and network connections are accessed through the operating system. Android Application Runtime : Android apps are most often written in the Java programming language and run in the Android runtime (ART). However, many apps, including core Android services and apps, are native apps or include native libraries. Both ART and native apps run within the same security environment, contained within the Application Sandbox. Apps get a dedicated part of the file system in which they can write private data, including databases and raw files. Apps Android apps extend the core Android operating system. There are two primary sources for apps: Preinstalled apps : Android includes a set of preinstalled apps including phone, email, calendar, web browser, and contacts. These function as user apps and they provide key device capabilities that can be accessed by other apps. Preinstalled apps may be part of the open source Android platform, or they may be developed by a device manufacturer for a specific device. User-installed apps : Android provides an open development environment that supports any third-party app. Google Play offers users hundreds of thousands of apps.","title":"Selinux"},{"location":"selinux/#selinux","text":"","title":"Selinux"},{"location":"selinux/#selinux-security-enhanced-linux","text":"As part of the Android security model. Android uses SELinux to enforce mandatory access control (MAC) over all processes. Even processes running with root/superuser privileges (a.k.a. Linux capabilities). SELinux enhances Android security by confining privileged processes and automating security policy creation.","title":"SElinux = Security-Enhanced Linux"},{"location":"selinux/#operation","text":"SELinux operates on the principle of default denial: Anything not explicitly allowed is denied. SELinux can operate in two global modes - Permissive mode, in which permission denials are logged but not enforced. - Enforcing mode, in which permissions denials are both logged and enforced.","title":"Operation"},{"location":"selinux/#schema","text":"Version SElinux 5.0 SELinux is fully enforced 6.0 isolation between users, IOCTL filtering 7.0 SELinux configuration to further lock down the application sandbox and reduce attack surface 8.0 updated SELinux to work with Treble, which separates the lower-level vendor code from the Android system framework","title":"Schema"},{"location":"selinux/#software-stack","text":"Device hardware : Android runs on a wide range of hardware configurations including mobile phones, smart TVs, OTT gaming boxes, and set-top-boxes. Android is processor-agnostic, but it takes advantage of some hardware-specific security capabilities such as ARM eXecute-Never. Android operating system : The core operating system is built on top of the Linux kernel. All device resources, like camera functions, GPS data, Bluetooth functions, telephony functions, and network connections are accessed through the operating system. Android Application Runtime : Android apps are most often written in the Java programming language and run in the Android runtime (ART). However, many apps, including core Android services and apps, are native apps or include native libraries. Both ART and native apps run within the same security environment, contained within the Application Sandbox. Apps get a dedicated part of the file system in which they can write private data, including databases and raw files.","title":"Software stack"},{"location":"selinux/#apps","text":"Android apps extend the core Android operating system. There are two primary sources for apps: Preinstalled apps : Android includes a set of preinstalled apps including phone, email, calendar, web browser, and contacts. These function as user apps and they provide key device capabilities that can be accessed by other apps. Preinstalled apps may be part of the open source Android platform, or they may be developed by a device manufacturer for a specific device. User-installed apps : Android provides an open development environment that supports any third-party app. Google Play offers users hundreds of thousands of apps.","title":"Apps"},{"location":"sip/","text":"Sip SIP = Session Initiation Protocol Android provides an API that supports the Session Initiation Protocol (SIP). This lets you add SIP-based internet telephony features to your applications. Android includes a full SIP protocol stack and integrated call management services that let applications easily set up outgoing and incoming voice calls, without having to manage sessions, transport-level communication, or audio record or playback directly. On Android see https://www.linphone.org/products","title":"Sip"},{"location":"sip/#sip","text":"","title":"Sip"},{"location":"sip/#sip-session-initiation-protocol","text":"Android provides an API that supports the Session Initiation Protocol (SIP). This lets you add SIP-based internet telephony features to your applications. Android includes a full SIP protocol stack and integrated call management services that let applications easily set up outgoing and incoming voice calls, without having to manage sessions, transport-level communication, or audio record or playback directly.","title":"SIP = Session Initiation Protocol"},{"location":"sip/#on-android","text":"see https://www.linphone.org/products","title":"On Android"},{"location":"spdif/","text":"Spdif S/PDIF = Sony/Philips Digital Interface S/PDIF (Sony/Philips Digital Interface)[1][2] is a type of digital audio interconnect used in consumer audio equipment to output audio over reasonably short distances. The signal is transmitted over either a coaxial cable with RCA connectors or a fiber optic cable with TOSLINK connectors. S/PDIF interconnects components in home theaters and other digital high-fidelity systems. Looks like On Android Starting with API level 16 (Jellybean) there's the MediaRouter API which allows you to get some information about the current audio/video routing. To get routing info you'd use the getSelectedRoute method, with the ROUTE_TYPE_LIVE_AUDIO or ROUTE_TYPE_LIVE_VIDEO flag. This gives you a RouteInfo object, through which you can get the name of the route using the getName method. MediaRouter mr = (MediaRouter)getSystemService(Context.MEDIA_ROUTER_SERVICE); RouteInfo ri = mr.getSelectedRoute(MediaRouter.ROUTE_TYPE_LIVE_AUDIO); if (\"HDMI\".equals(ri.getName().toString()) { // do something... }","title":"Spdif"},{"location":"spdif/#spdif","text":"","title":"Spdif"},{"location":"spdif/#spdif-sonyphilips-digital-interface","text":"S/PDIF (Sony/Philips Digital Interface)[1][2] is a type of digital audio interconnect used in consumer audio equipment to output audio over reasonably short distances. The signal is transmitted over either a coaxial cable with RCA connectors or a fiber optic cable with TOSLINK connectors. S/PDIF interconnects components in home theaters and other digital high-fidelity systems.","title":"S/PDIF = Sony/Philips Digital Interface"},{"location":"spdif/#looks-like","text":"","title":"Looks like"},{"location":"spdif/#on-android","text":"Starting with API level 16 (Jellybean) there's the MediaRouter API which allows you to get some information about the current audio/video routing. To get routing info you'd use the getSelectedRoute method, with the ROUTE_TYPE_LIVE_AUDIO or ROUTE_TYPE_LIVE_VIDEO flag. This gives you a RouteInfo object, through which you can get the name of the route using the getName method. MediaRouter mr = (MediaRouter)getSystemService(Context.MEDIA_ROUTER_SERVICE); RouteInfo ri = mr.getSelectedRoute(MediaRouter.ROUTE_TYPE_LIVE_AUDIO); if (\"HDMI\".equals(ri.getName().toString()) { // do something... }","title":"On Android"},{"location":"stb/","text":"Stb STB = Set Top Box A device needed to receive and watch digital television on a ordinary \"analog\" television. The set-top box receives the digital TV channels from a broadband source (cable, satellite, terrestrial or ADSL). The selected TV program is decoded and translated in a signal that can be understood by an ordinary \"analog\" television. In addition to the decoding of tv programs, the set-top box may perform other functions such as recording and playing back television programs and an electronic program guide. The set-top box may also be able to perform interactive functions such as video-on-demand, gaming and other entertainment services if there is a return channel available. Look like","title":"Stb"},{"location":"stb/#stb","text":"","title":"Stb"},{"location":"stb/#stb-set-top-box","text":"A device needed to receive and watch digital television on a ordinary \"analog\" television. The set-top box receives the digital TV channels from a broadband source (cable, satellite, terrestrial or ADSL). The selected TV program is decoded and translated in a signal that can be understood by an ordinary \"analog\" television. In addition to the decoding of tv programs, the set-top box may perform other functions such as recording and playing back television programs and an electronic program guide. The set-top box may also be able to perform interactive functions such as video-on-demand, gaming and other entertainment services if there is a return channel available.","title":"STB = Set Top Box"},{"location":"stb/#look-like","text":"","title":"Look like"},{"location":"tr-069/","text":"Tr-069 Tr-069 = Technical Report069 TR069-client implements CPE WAN Management Protocol (CWMP) for remote device management Standardized by the Broadband Forum (BBF). CWMP works over IP network using HTTP(S) to communicate with the Auto Configuration Server (ACS) Can monitor, configure attributes and update the firmware of a remote device. Typically used by ISPs to manage CPEs, but also can be used for Network Infrastructure Device management. Defines An application layer protocol for remote management of customer-premises equipment - Manufacturer - Product Class - Serial Number connected to an Internet Protocol (IP) network. TR-069 uses the CPE WAN Management Protocol (CWMP) which provides support functions for auto-configuration, software or firmware image management, software module management, status and performance managements, and diagnostics Schema","title":"Tr-069"},{"location":"tr-069/#tr-069","text":"","title":"Tr-069"},{"location":"tr-069/#tr-069-technical-report069","text":"TR069-client implements CPE WAN Management Protocol (CWMP) for remote device management Standardized by the Broadband Forum (BBF). CWMP works over IP network using HTTP(S) to communicate with the Auto Configuration Server (ACS) Can monitor, configure attributes and update the firmware of a remote device. Typically used by ISPs to manage CPEs, but also can be used for Network Infrastructure Device management.","title":"Tr-069 = Technical Report069"},{"location":"tr-069/#defines","text":"An application layer protocol for remote management of customer-premises equipment - Manufacturer - Product Class - Serial Number connected to an Internet Protocol (IP) network. TR-069 uses the CPE WAN Management Protocol (CWMP) which provides support functions for auto-configuration, software or firmware image management, software module management, status and performance managements, and diagnostics","title":"Defines"},{"location":"tr-069/#schema","text":"","title":"Schema"},{"location":"tv_provider/","text":"Tv provider The TV Provider database stores the channels and programs from TV Inputs. The TV Provider also publishes and manages the associated permissions so that TV Inputs can see only their own records. For instance, a specific TV Input can see only the channels and programs it has supplied and is prohibited from accessing any other TV Inputs\u2019 channels and programs. The TV Provider maps \"broadcast genre\" to \"canonical genre\" internally. TV Inputs are responsible for populating \"broadcast genre\" with the value in the underlying broadcast standard, and the \"canonical genre\" field will automatically be populated with the correct associated genre from android.provider.TvContract.Genres. For example, with broadcast standard ATSC A/65 and program with genre 0x25 (meaning \u201cSports\u201d), the TV Input will populate the \u201cbroadcast genre\u201d with the String \u201cSports\u201d and TV Provider will populate the \u201ccanonical genre\u201d field with the mapped value android.provider.TvContract.Genres.SPORTS. Schema","title":"Tv provider"},{"location":"tv_provider/#tv-provider","text":"The TV Provider database stores the channels and programs from TV Inputs. The TV Provider also publishes and manages the associated permissions so that TV Inputs can see only their own records. For instance, a specific TV Input can see only the channels and programs it has supplied and is prohibited from accessing any other TV Inputs\u2019 channels and programs. The TV Provider maps \"broadcast genre\" to \"canonical genre\" internally. TV Inputs are responsible for populating \"broadcast genre\" with the value in the underlying broadcast standard, and the \"canonical genre\" field will automatically be populated with the correct associated genre from android.provider.TvContract.Genres. For example, with broadcast standard ATSC A/65 and program with genre 0x25 (meaning \u201cSports\u201d), the TV Input will populate the \u201cbroadcast genre\u201d with the String \u201cSports\u201d and TV Provider will populate the \u201ccanonical genre\u201d field with the mapped value android.provider.TvContract.Genres.SPORTS.","title":"Tv provider"},{"location":"tv_provider/#schema","text":"","title":"Schema"},{"location":"uhd/","text":"Uhd UHD = Ultra-high-definition Ultra-high-definition television (also known as Ultra HD television, Ultra HD, UHDTV, UHD and Super Hi-Vision) today includes 4K UHD and 8K UHD, which are two digital video formats with an aspect ratio of 16:9. These were first proposed by NHK Science & Technology Research Laboratories and later defined and approved by the International Telecommunication Union (ITU) It is a digital television (DTV) standard, and the successor to high-definition television (HDTV), which in turn was the successor to standard-definition television (SDTV). Schema","title":"Uhd"},{"location":"uhd/#uhd","text":"","title":"Uhd"},{"location":"uhd/#uhd-ultra-high-definition","text":"Ultra-high-definition television (also known as Ultra HD television, Ultra HD, UHDTV, UHD and Super Hi-Vision) today includes 4K UHD and 8K UHD, which are two digital video formats with an aspect ratio of 16:9. These were first proposed by NHK Science & Technology Research Laboratories and later defined and approved by the International Telecommunication Union (ITU) It is a digital television (DTV) standard, and the successor to high-definition television (HDTV), which in turn was the successor to standard-definition television (SDTV).","title":"UHD = Ultra-high-definition"},{"location":"uhd/#schema","text":"","title":"Schema"},{"location":"upnp/","text":"Upnp Upnp = Universal Plug and Play The UPnP architecture allows device-to-device networking of consumer - electronics - mobile devices - personal computers - networked home appliances It is a distributed, open architecture protocol based on established standards - Internet Protocol Suite (TCP/IP) - HTTP - XML - SOAP UPnP control points (CPs) are devices which use UPnP protocols to control UPnP controlled devices (CDs).","title":"Upnp"},{"location":"upnp/#upnp","text":"","title":"Upnp"},{"location":"upnp/#upnp-universal-plug-and-play","text":"The UPnP architecture allows device-to-device networking of consumer - electronics - mobile devices - personal computers - networked home appliances It is a distributed, open architecture protocol based on established standards - Internet Protocol Suite (TCP/IP) - HTTP - XML - SOAP UPnP control points (CPs) are devices which use UPnP protocols to control UPnP controlled devices (CDs).","title":"Upnp = Universal Plug and Play"}]}